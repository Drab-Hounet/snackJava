
package snake.drab.display;

import Snake.drab.attributes.Square;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

/**
 *
 * @author jerome.lombard
 */
public class DisplayGame extends javax.swing.JFrame implements KeyListener {

    public ArrayList<ArrayList<Square>> listBoard = new ArrayList();
    private int[] placementPresent = {0,0};
     
    public DisplayGame() {
        initComponents();   
        addKeyListener (this);
    }
    
    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyPressed(KeyEvent e) {

        SquareGraphics  squareGraphics = new SquareGraphics();
        if(e.getKeyCode() == 37){
                        
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("default");
            this.placementPresent[1]--;
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("SnackHead");
            squareGraphics.updateGraphics(listBoard);
            repaint();
        }
        else if(e.getKeyCode() == 39){
            
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("default");
            this.placementPresent[1]++;
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("SnackHead");
            squareGraphics.updateGraphics(listBoard);
            repaint();
        }
        
        else if(e.getKeyCode() == 38){
            
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("default");
            this.placementPresent[0]--;
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("SnackHead");
            squareGraphics.updateGraphics(listBoard);
            repaint();
        }
        
        else if(e.getKeyCode() == 40){
            
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("default");
            this.placementPresent[0]++;
            listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("SnackHead");
            squareGraphics.updateGraphics(listBoard);
            repaint();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}
    
    public void run(){
        //making of the board
         
        //initialisation of board
        int size= 4;       
        for(int j = 0 ; j < size ; j ++  ){
            ArrayList<Square> rowSquare = new ArrayList();
            for(int i = 0 ; i < size ; i ++ ){
                rowSquare.add(new Square("default"));
            }            
            listBoard.add(rowSquare);
        } 
        //make origin
        this.listBoard.get(this.placementPresent[0]).get(this.placementPresent[1]).setType("SnackHead");
        this.setContentPane(new SquareGraphics(listBoard));
    }
    
    
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
